{"ast":null,"code":"export class Formula {\n  constructor(formula = '') {\n    this.current_number = 0;\n    this.prev_number = 0;\n    this.stack = [];\n    this.start = false;\n    this.dotted = false; // input number having dot\n\n    this.is_operand = false;\n    this.radians = true;\n    this.operation = '';\n    this.memory = 0;\n    this.in_memory = false;\n    this.bracket = false;\n    this.secondScreen = false;\n    this.formula = formula;\n  }\n\n  get() {\n    return this.formula;\n  }\n\n  parse(value) {\n    return parseFloat(value);\n  }\n\n  getCurrentNumber() {\n    return this.parse(this.formula);\n  }\n\n  setRadians(switcher) {\n    this.radians = switcher;\n    return this.radians;\n  }\n\n  clear() {\n    this.formula = '0';\n    this.dotted = false;\n    this.is_operand = false;\n    this.operation = '';\n    this.start = false;\n    this.stack = [];\n    this.bracket = false;\n    return this.formula;\n  }\n\n  clearMemory() {\n    this.memory = 0;\n    this.in_memory = false;\n  }\n\n  sumToMemory() {\n    let value = this.getCurrentNumber();\n    this.memory += value;\n    this.in_memory = true;\n    this.start = true;\n  }\n\n  deductToMemory() {\n    let value = this.getCurrentNumber();\n    this.memory -= value;\n    this.in_memory = true;\n    this.start = true;\n  }\n\n  readMemory() {\n    this.formula = this.memory.toString();\n    return this.formula;\n  }\n\n  addBracket(value) {\n    // brackets can be set only if we have not set them before and we set operand (if we set brackets first - it will not make sense)\n    if (value == '(' && this.bracket == false && this.is_operand == true) {\n      this.stack.push(value);\n      this.bracket = true;\n      this.is_operand = false;\n    }\n\n    if (value == ')' && this.bracket == true && this.is_operand != true) {\n      this.bracket = false;\n      this.stack.push(this.formula);\n      this.stack.push(')');\n      this.is_operand = false;\n      this.start = true;\n      this.formula = eval(this.stack.join('')).toString();\n      this.stack = [this.formula];\n    }\n  }\n\n  setOperation(operand) {\n    this.operation = operand; // If operator already set - nothing doing\n\n    if (this.is_operand) {\n      this.operation = operand;\n      return null;\n    }\n\n    this.is_operand = true;\n    this.stack.push(this.formula);\n    this.stack.push(this.operation);\n    this.start = true;\n  }\n\n  calculate() {\n    let result;\n    if (this.stack.length < 3) return;\n    this.is_operand = false;\n    this.current_number = this.parse(this.stack.pop());\n    this.operation = this.stack.pop();\n    this.prev_number = this.parse(this.stack.pop());\n    if (!this.prev_number) return 0;\n\n    switch (this.operation) {\n      case '+':\n        result = this.prev_number + this.current_number;\n        this.show(result);\n        break;\n\n      case '-':\n        result = this.prev_number - this.current_number;\n        this.show(result);\n        break;\n\n      case '*':\n        result = this.prev_number * this.current_number;\n        this.show(result);\n        break;\n\n      case '/':\n        result = this.prev_number / this.current_number;\n        this.show(result);\n        break;\n\n      case 'sqrt':\n        result = Math.pow(this.prev_number, 1 / this.current_number);\n        this.show(result);\n        break;\n\n      case 'pow':\n        result = Math.pow(this.prev_number, this.current_number);\n        this.show(result);\n        break;\n\n      case 'yx':\n        result = Math.pow(this.current_number, this.prev_number);\n        this.show(result);\n        break;\n\n      case 'log':\n        result = Math.log(this.prev_number) / Math.log(this.current_number);\n        break;\n    }\n\n    this.current_number = this.parse(this.formula);\n    this.start = true;\n    return result;\n  }\n\n  addValue(value, start) {\n    if (start || this.start || this.dotted == false && this.formula == '0' && value != '.') {\n      this.formula = '';\n    }\n\n    this.start = start;\n\n    if (value == '.') {\n      if (this.dotted == true) {\n        return this.formula;\n      }\n\n      this.dotted = true;\n    }\n\n    this.formula += value;\n    this.is_operand = false;\n    return this.formula;\n  }\n\n  removeSymbol() {\n    let len = this.formula.length;\n    let last_symbol = this.formula.substring(len - 1, len);\n\n    if (last_symbol == '.') {\n      this.dotted = false;\n    }\n\n    this.formula = this.formula.slice(0, -1);\n  }\n\n  singleton(operand, data) {\n    let result = 0;\n    let rad = 0;\n    let grad = 180 / Math.PI;\n    this.current_number = parseFloat(this.formula);\n\n    switch (operand) {\n      case 'invert':\n        result = this.current_number * data;\n        break;\n\n      case 'sqrt':\n        result = Math.sqrt(this.current_number);\n        break;\n\n      case 'sqrt3':\n        result = Math.pow(this.current_number, 1 / 3);\n        break;\n\n      case 'ln':\n        result = Math.log(this.current_number);\n        break;\n\n      case 'lg':\n        result = Math.log(this.current_number) / Math.log(data);\n        break;\n\n      case 'pow_base':\n        let base = data == 'e' ? Math.E : data;\n        result = Math.pow(base, this.current_number);\n        break;\n\n      case 'pow':\n        let step = parseFloat(data);\n        result = Math.pow(this.current_number, step);\n        break;\n\n      case 'div':\n        result = 1 / this.current_number;\n        break;\n\n      case 'sin':\n        rad = this.radians ? this.current_number : this.current_number / grad;\n        result = Math.sin(rad);\n        break;\n\n      case 'cos':\n        rad = this.radians ? this.current_number : this.current_number / grad;\n        result = Math.cos(rad);\n        break;\n\n      case 'tan':\n        rad = this.radians ? this.current_number : this.current_number / grad;\n        result = Math.tan(rad);\n        break;\n\n      case 'sinh':\n        rad = this.radians ? this.current_number : this.current_number / grad;\n        result = (Math.exp(rad) - Math.exp(-rad)) / 2;\n        break;\n\n      case 'cosh':\n        rad = this.radians ? this.current_number : this.current_number / grad;\n        result = (Math.exp(rad) + Math.exp(-rad)) / 2;\n        break;\n\n      case 'tanh':\n        rad = this.radians ? this.current_number : this.current_number / grad;\n        result = (Math.exp(rad) - Math.exp(-rad)) / (Math.exp(rad) + Math.exp(-rad));\n        break;\n\n      case 'asin':\n        result = Math.asin(this.current_number);\n        result = this.radians ? result : result * grad;\n        break;\n\n      case 'acos':\n        result = Math.acos(this.current_number);\n        result = this.radians ? result : result * grad;\n        break;\n\n      case 'atan':\n        result = Math.atan(this.current_number);\n        result = this.radians ? result : result * grad;\n        break;\n\n      case 'asinh':\n        result = Math.asinh(this.current_number);\n        result = this.radians ? result : result * grad;\n        break;\n\n      case 'acosh':\n        result = Math.acosh(this.current_number);\n        result = this.radians ? result : result * grad;\n        break;\n\n      case 'atanh':\n        result = Math.atanh(this.current_number);\n        result = this.radians ? result : result * grad;\n        break;\n\n      case 'rand':\n        result = Math.random();\n        break;\n\n      case 'factorial':\n        let n = Math.ceil(this.current_number);\n        result = 1;\n\n        for (let i = 1; i <= n; i++) {\n          result *= i;\n        }\n\n        break;\n\n      case 'percent':\n        result = this.current_number / 100;\n        break;\n\n      case 'ee':\n        this.formula = this.current_number.toExponential();\n        return 0;\n    }\n\n    this.start = true;\n    this.show(result);\n    return result;\n  }\n\n  show(value) {\n    this.formula = value.toString();\n    return this.formula;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}